@@-- The documentation of the templates is there:
@@-- https://taste.tuxfamily.org/wiki/index.php?title=Kazoo_Templates_Documentation
@@-- If you are using vim, go over the URL and pres gx in to follow the link
@@-- If you have no internet access you can also use (with vim) Ctrl-W-f or gf in vim to open the text doc:
@@-- $HOME/tool-inst/share/kazoo/doc/templates_skeletons_sub_interface.ascii
@@MACRO(PARAMETERS)@@
@@IF@@ @_EXIST:Param_Names_@
    @@INLINE(\n      \()(,\n       )(\))@@
       @@TABLE'ALIGN_ON("*")@@
          @@IF@@ @_Param_Directions_@ = PARAM_IN
             const asn1Scc@_Param_Types_@ *IN_@_LOWER:Param_Names_@
          @@ELSE@@
             asn1Scc@_Param_Types_@ *OUT_@_LOWER:Param_Names_@
          @@END_IF@@
       @@END_TABLE@@
    @@END_INLINE@@
@@ELSE@@
(void)
@@END_IF@@
@@END_MACRO@@

void @_LOWER:Parent_Function_@_RI_@_Name_@@_REPLACE_ALL(-/_):REPLACE((.*)(\))(\n)/\\1\\2):PARAMETERS()_@;
void @_LOWER:Parent_Function_@_RI_@_Name_@@_REPLACE_ALL(-/_):REPLACE((.*)(\))(\n)/\\1\\2):PARAMETERS()_@
{
   #ifdef __unix__
      // Log MSC data on Linux when environment variable is set
      static int innerMsc = -1;
      if (-1 == innerMsc)
         innerMsc = (NULL != getenv("TASTE_INNER_MSC"))?1:0;
      if (1 == innerMsc) {
         long long msc_time = getTimeInMilliseconds();
      @@TABLE'TERSE@@
       @@IF@@ @_Param_Directions_@ = PARAM_IN
         @@-- ignore the function parameters for the moment, that is too verbose in MSCs
         @@-- Except if it is a timer: in that case send the parameter
        @@IF@@ @_Is_Timer_@
         PrintASN1@_REPLACE_ALL(-/_):Param_Types_@ ("INNERDATA: @_LOWER:Name_@::@_REPLACE_ALL(-/_):Param_Types_@::@_LOWER:Param_Names_@", IN_@_LOWER:Param_Names_@);
         puts("");
        @@END_IF@@
       @@END_IF@@
      @@END_TABLE@@
      @@TABLE@@
         // Log message to @_Remote_Function_Names_@ (corresponding PI: @_Remote_Interface_Names_@)
         printf ("INNER_RI: @_LOWER:Parent_Function_@,@_LOWER:Remote_Function_Names_@,@_LOWER:Name_@,@_LOWER:Remote_Interface_Names_@,%lld\n", msc_time);
      @@END_TABLE@@
         fflush(stdout);
      }
   #endif
@@TABLE'TERSE@@
@@IF@@ @_Param_Directions_@ = PARAM_IN
  @@IF@@ @_Param_Encodings_@ = NATIVE
  @@-- native encodings: we do not need to make any copy
  @@-- static asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ IN_buf_@_LOWER:Param_Names_@;
  @@ELSIF@@ @_Param_Encodings_@ = UPER
   // Encode parameter @_Param_Names_@ using ASN.1 UPER
   static char IN_buf_@_LOWER:Param_Names_@[asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ENCODING] = {0};
  @@ELSIF@@ @_Param_Encodings_@ = ACN
   // Encode parameter @_Param_Names_@ using ASN.1 ACN
   static char IN_buf_@_LOWER:Param_Names_@[asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ACN_ENCODING] = {0};
  @@END_IF@@
  @@IF@@ @_Param_Encodings_@ /= NATIVE
   int size_IN_buf_@_LOWER:Param_Names_@ =
      Encode_@_Param_Encodings_@_@_REPLACE_ALL(-/_):Param_Types_@
        ((void *)&IN_buf_@_LOWER:Param_Names_@,
  @@IF@@ @_Param_Encodings_@ = UPER
          asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ENCODING,
  @@ELSIF@@ @_Param_Encodings_@ = ACN
          asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ACN_ENCODING,
  @@END_IF@@
          (asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ *)IN_@_LOWER:Param_Names_@);
   if (-1 == size_IN_buf_@_LOWER:Param_Names_@) {
      #ifdef __unix__
         puts ("[ERROR] ASN.1 Encoding failed in @_LOWER:Parent_Function_@_RI_@_Name_@, parameter @_Param_Names_@");
      #endif
        /* Crash the application due to message loss */
        abort();
   }
  @@END_IF@@
@@END_IF@@
@@END_TABLE@@

@@TABLE'TERSE@@
@@IF@@ @_Param_Directions_@ = PARAM_OUT
  @@IF@@ @_Param_Encodings_@ = NATIVE
  @@-- static asn1Scc@_REPLACE_ALL(-/_):Param_Types_@ OUT_buf_@_LOWER:Param_Names_@;
  @@ELSIF@@ @_Param_Encodings_@ = UPER
   // Buffer for decoding parameter @_Param_Names_@ from UPER
   static char OUT_buf_@_LOWER:Param_Names_@[asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ENCODING];
  @@ELSIF@@ @_Param_Encodings_@ = ACN
   // Buffer for decoding parameter @_Param_Names_@ from ACN
   static char OUT_buf_@_LOWER:Param_Names_@[asn1Scc@_REPLACE_ALL(-/_):Param_Types_@_REQUIRED_BYTES_FOR_ACN_ENCODING];
  @@END_IF@@
   size_t      size_OUT_buf_@_LOWER:Param_Names_@ = 0;
@@END_IF@@
@@END_TABLE@@

   // Send the message via the middleware API
@@IF@@ @_Param_Names'Length_@ = 0
   extern void vm_@_LOWER:Parent_Function_@_@_LOWER:Name_@(void);
   vm_@_LOWER:Parent_Function_@_@_LOWER:Name_@();
@@ELSE@@
   extern void vm_@_LOWER:Parent_Function_@_@_LOWER:Name_@
@@INLINE(     \()(,\n      )(\);\n)@@
   @@TABLE@@
      @@IF@@ @_Param_Directions_@ = "PARAM_IN"
         void *, size_t
      @@ELSE@@
         void *, size_t *
      @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@
   vm_@_LOWER:Parent_Function_@_@_LOWER:Name_@
@@INLINE(     \()(,\n      )(\);\n)@@
   @@TABLE@@
      @@IF@@ @_Param_Directions_@ = "PARAM_IN"
       @@IF@@ @_Param_Encodings_@ = NATIVE
         (void *)IN_@_LOWER:Param_Names_@, sizeof(asn1Scc@_REPLACE_ALL(-/_):Param_Types_@)
       @@ELSE@@
         (void *)&IN_buf_@_LOWER:Param_Names_@, (size_t)size_IN_buf_@_LOWER:Param_Names_@
       @@END_IF@@
      @@ELSE@@
       @@IF@@ @_Param_Encodings_@ = NATIVE
         (void *)OUT_@_LOWER:Param_Names_@, &size_OUT_buf_@_LOWER:Param_Names_@
       @@ELSE@@
         (void *)&OUT_buf_@_LOWER:Param_Names_@, &size_OUT_buf_@_LOWER:Param_Names_@
       @@END_IF@@
      @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@
@@END_IF@@

@@TABLE'TERSE@@
@@IF@@ @_Param_Directions_@ = PARAM_OUT and @_Param_Encodings_@ /= NATIVE
   // Decode parameter @_Param_Names_@
   if (0 != Decode_@_Param_Encodings_@_@_REPLACE_ALL(-/_):Param_Types_@
              (OUT_@_LOWER:Param_Names_@, (void *)&OUT_buf_@_LOWER:Param_Names_@, size_OUT_buf_@_LOWER:Param_Names_@)) {
#ifdef __unix__
      puts ("[ERROR] ASN.1 Decoding failed in @_LOWER:Parent_Function_@_RI_@_Name_@, parameter @_Param_Names_@");
#endif
      return;
  }
@@END_IF@@
@@END_TABLE@@
}
