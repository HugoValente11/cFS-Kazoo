@@-- The up to date list of tags available for this template is available here:
@@-- https://taste.tuxfamily.org/wiki/index.php?title=Kazoo_Templates_Documentation#templates.2Fskeletons.2Fmakefile.tmplt
@@-- If you are using vim, go over the URL and pres gx in to follow the link
@@-- If you have no internet access you can also use (with vim) Ctrl-W-f then Ctrl-W-L (or gf)
@@-- in vim to open the doc: $HOME/tool-inst/share/kazoo/doc/templates_skeletons_makefile.ascii
@@--
# MAKEFILE_PATH   := $(abspath $(lastword $(MAKEFILE_LIST)))
MAKEFILE_PATH   := $(lastword $(MAKEFILE_LIST))
TOOL_INST       := $(shell taste-config --prefix)
OUTDIR          := $(dir $(MAKEFILE_PATH))
TASTE_SHARED_TYPES?=${HOME}/.local/share/QtProject/QtCreator/shared_types
ASN1_FILES      := @_REPLACE_ALL(,/):ASN1_Files_@
CP_FILES        := @_REPLACE_ALL(,/):CP_Files_@      # Context parameters
DATAVIEW_PATH   := ${OUTDIR}/dataview
DATAVIEW_UNIQ   := ${DATAVIEW_PATH}/dataview-uniq.asn
@@IF@@ @_ACN_Files'Length_@ > 0
DATAVIEW_ACN    := ${DATAVIEW_PATH}/dataview-uniq.acn
@@ELSE@@
DATAVIEW_ACN    :=
@@END_IF@@
DATAVIEW_AADLV1 := ${DATAVIEW_PATH}/dataview_aadlv1.aadl
DATAVIEW_AADLV2 := ${DATAVIEW_PATH}/dataview_aadlv2.aadl
#TASTE_SHARED_TYPES?=${TOOL_INST}/share/SharedTypes  # Ellidiss only

# Project cache folder is used to speed up all ASN.1-related processing
export PROJECT_CACHE=${HOME}/.taste_AST_cache

@@IF@@ @_Target_@ /= SIMU
all:	build-default
@@ELSE@@
@@-- for pure simulation target, force the generation of the Ada dataview
@@SET@@ Need_Ada = TRUE
# Build a simulator of the system (experimental)
all:	aadl2glueC build/system_config.h ${DATAVIEW_PATH}/built 
	cd dataview && taste-asn1-iterators --raw dataview-uniq.asn
	$(MAKE) -j -C build -f Makefile.taste simu
	# Generate the observer ASN.1 file
	mkdir -p simulation/mcsrc
	cp -u ${TOOL_INST}/share/simu-common/mc.ad[sb] simulation/mcsrc
	cp -u ${TOOL_INST}/share/simu-common/modelcheck.adb simulation/mcsrc
	cp -u ${TOOL_INST}/share/simu-common/mc.gpr simulation
	cp -u ${TOOL_INST}/share/simu-common/guilayout.ui simulation
	cp -u ${TOOL_INST}/share/simu-common/simu_params.ui simulation
	cp -u ${TOOL_INST}/share/simu-common/toolbar.ui simulation
	cd simulation && ln -fs observers/observer.asn . && taste-process-observers
@@END_IF@@

# Check that all runtimes used in the system are installed
check_targets:
	$(MAKE) -C build -f Makefile.taste check_targets

@@-- global check to check which dataviews are neeeded
@@TABLE@@
  @@IF@@ @_Unique_Languages_@ = Ada or @_Unique_Languages_@ = SDL or @_Unique_Languages_@ = QGenAda
     @@SET@@ Need_Ada=TRUE
  @@ELSIF@@ @_Unique_Languages_@ /= C and @_Unique_Languages_@ /= CPP and @_Unique_Languages_@ /= Blackbox_C and @_Unique_Languages_@ /= GUI and @_Unique_Languages_@ /= Timer_Manager
     @@SET@@ Other_DataViews=TRUE
  @@ELSIF@@ @_Unique_Languages_@ = GUI
     @@SET@@ Has_GUI=TRUE
  @@END_IF@@
@@END_TABLE@@
# Generate the language-specific data view needed before editing user code
@@IF@@ not @_Need_Ada_@ and not @_Other_DataViews_@
dataview:	dataview/C/built
@@END_IF@@
@@INLINE(dataview:	dataview/C/built )( )()@@
   @@IF@@ @_Need_Ada_@ = TRUE
      dataview/Ada/built
   @@END_IF@@
   @@TABLE@@  @@-- Exclude Python because it depends on information from the deployment view and it is not needed for the skeletons
      @@IF@@ @_Unique_Languages_@ /= "Ada" and @_Unique_Languages_@ /= "SDL" and @_Unique_Languages_@ /= C and @_Unique_Languages_@ /= CPP and @_Unique_Languages_@ /= Blackbox_C and @_Unique_Languages_@ /= GUI and @_Unique_Languages_@ /= Timer_Manager
         dataview/@_Unique_Languages_@/built
      @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@
@@-- for SDL, copy the dataview to the function folder
@@TABLE@@
  @@IF@@ @_Language_@ = SDL
    @@IF@@ @_Has_Context_Param_@
	# SDL function with context parameters: put them in dataview @_Instance_Of_@ 
	@@IF@@ @_Instance_Of_@ /= ""
	@@-- Function is an instance of a type
	@@IF@@ @_Is_Shared_Type_@
	@@-- function type is stored in the shared library folder
	sed -e '$$s/$$/\n/' -s ${DATAVIEW_UNIQ} @_LOWER:Function_Names_@/SDL/Context-@_LOWER:REPLACE_ALL(_/-):Function_Names_@.asn ${TASTE_SHARED_TYPES}/@_Instance_Of_@/work/@_LOWER:Instance_Of_@/SDL/Context*.asn > @_LOWER:Function_Names_@/SDL/src/dataview-uniq.asn
	@@ELSE@@
	sed -e '$$s/$$/\n/' -s ${DATAVIEW_UNIQ} @_LOWER:Function_Names_@/SDL/Context-@_LOWER:REPLACE_ALL(_/-):Function_Names_@.asn @_LOWER:Instance_Of_@/SDL/Context*.asn > @_LOWER:Function_Names_@/SDL/src/dataview-uniq.asn
	@@END_IF@@
	@@ELSE@@
	@@-- Regular SDL function (not an instance)
	sed -e '$$s/$$/\n/' -s ${DATAVIEW_UNIQ} @_LOWER:Function_Names_@/SDL/Context-@_LOWER:REPLACE_ALL(_/-):Function_Names_@.asn > @_LOWER:Function_Names_@/SDL/src/dataview-uniq.asn
	@@END_IF@@
    @@ELSE@@
	# Copy the dataview to SDL function @_Function_Names_@ (no context parameters)
	cp -u ${DATAVIEW_UNIQ} @_LOWER:Function_Names_@/SDL/src
    @@END_IF@@
	# Compute MD5 of the dataview, needed to decide if code needs to be re-generated
	md5sum -c "@_LOWER:Function_Names_@/SDL/src/dataview.md5"  &> /dev/null || md5sum  "@_LOWER:Function_Names_@/SDL/src/dataview-uniq.asn" >  "@_LOWER:Function_Names_@/SDL/src/dataview.md5"
  @@END_IF@@
@@END_TABLE@@

# Generate the complete dataview, including Python bindings if there is a GUI
@@IF@@ @_Has_GUI_@
${DATAVIEW_PATH}/built:	dataview dataview/Python/built
@@ELSE@@
${DATAVIEW_PATH}/built:	dataview
@@END_IF@@
	touch $@

# Build based on the deployment view
build-default:	aadl2glueC build/system_config.h ${DATAVIEW_PATH}/built build/deploymentview_final/Makefile
	$(MAKE) -j -C build -f Makefile.taste

# Execute the generated binaries (used in Space Creator when using the Run button)
run: # Space creator will always build before, so no need to depend on build-default
	$(MAKE) -j -C build -f Makefile.taste run

# Run the Concurrency View analysis tool (cheddar/marzhin)
run_cv: build/ConcurrencyView.aadl
	TASTECV --load $^

# The Concurrency View needed by Cheddar is the concatenation of system.aadl and ocarina_components.aadl
build/ConcurrencyView.aadl:	build/system.aadl
	cat $^ $(shell taste-config --prefix)/share/ocarina/AADLv2/ocarina_components.aadl > $@

# Rule to invoke Ocarina (generation of POHI middleware code)
build/deploymentview_final/Makefile:	build/main.aadl ${DATAVIEW_AADLV2}
	$(MAKE) -C build -f Makefile.taste ocarina

@@-- SQL Database: can be created by taste-create-database
@@-- Add a dependency to make sure that if is is modified, the GUIs
@@-- Using it are properly updated
# Optionally manage SQL Database (run taste-create-database to enable)
sql_db/DV.py:
	mkdir -p sql_db && touch $@

# Create dataview-uniq.asn by concatenating all asn1 input files
${DATAVIEW_UNIQ}:	${ASN1_FILES}
	mkdir -p ${PROJECT_CACHE} && mkdir -p ${DATAVIEW_PATH}
	@@-- Don't use cat, because files need newlines in between
	sed -e '$$s/$$/\n/' -s $^ > $@

@@IF@@ @_ACN_Files'Length_@ > 0
# Create dataview-uniq.acn by concatenating all input files
${DATAVIEW_ACN}:	@_REPLACE_ALL(,/):ACN_Files_@
	mkdir -p ${DATAVIEW_PATH}
	@@-- Don't use cat, because files need newlines in between
	sed -e '$$s/$$/\n/' -s $^ > $@
@@END_IF@@

# system_config.h is used to filter out non-needed ASN.1 encoder/decoders
build/system_config.h:	$(wildcard */*/wrappers/*_system_config.h)
	cat $^ > $@

#  Call DMT/aadl2glueC to generate glue code from the mini-cv.aadl files
@@INLINE(aadl2glueC:	)( )()@@
        @@TABLE@@
	@@IF@@ not @_Is_Type_@
            @_LOWER:Function_Names_@/@_Language_@/wrappers/aadl2glueC_built
	@@END_IF@@
	@@IF@@ @_Language_@ = QGenC
 cfs/apps/@_LOWER:Function_Names_@_app/fsw/src/aadl2glueC_built
	@@END_IF@@
	@@END_TABLE@@
@@END_INLINE@@

# Build dataview.aadl in AADLv1 format, used by DMT to generate glue code
${DATAVIEW_AADLV1}: ${DATAVIEW_UNIQ}
	@@-- Generate DataView.aadl in AADLV1 as this is needed by aadl2glueC
	asn2aadlPlus  $< $@

# Build dataview.aadl in AADLv2 format, used by Ocarina to generate glue code
${DATAVIEW_AADLV2}: ${DATAVIEW_UNIQ}
	@@-- Generate DataView.aadl in AADLV2 without -f flag
	asn2aadlPlus --aadlv2  $< $@

@@-- For each function generate the glue code from DMT based on the dataview
	@@TABLE@@
	@@IF@@ not @_Is_Type_@
@_LOWER:Function_Names_@/@_Language_@/wrappers/aadl2glueC_built: @_LOWER:Function_Names_@/@_Language_@/wrappers/@_LOWER:Function_Names_@_mini_cv.aadl ${DATAVIEW_AADLV1}
	@@IF@@ @_Is_FPGA_@ and @_CPU_Platform_@ = PLATFORM_ZYNQZC706
	aadl2glueC -fpga ZYNQZC706 -o $(dir $@) $^
	@@ELSIF@@ @_Is_FPGA_@ and @_CPU_Platform_@ = PLATFORM_BRAVE_LARGE_FREERTOS
	aadl2glueC -fpga NGLARGE -o $(dir $@) $^
	@@ELSE@@
	aadl2glueC -allboards -o $(dir $@) $^
	@@END_IF@@
	touch $@

	@@END_IF@@
	@@IF@@ @_Language_@ = QGenC
cfs/apps/@_LOWER:Function_Names_@_app/fsw/src/aadl2glueC_built: cfs/apps/@_LOWER:Function_Names_@_app/fsw/src/@_LOWER:Function_Names_@_mini_cv.aadl ${DATAVIEW_AADLV1}
	@@IF@@ @_Is_FPGA_@ and @_CPU_Platform_@ = PLATFORM_ZYNQZC706
	aadl2glueC -fpga ZYNQZC706 -o $(dir $@) $^
	@@ELSIF@@ @_Is_FPGA_@ and @_CPU_Platform_@ = PLATFORM_BRAVE_LARGE_FREERTOS
	aadl2glueC -fpga NGLARGE -o $(dir $@) $^
	@@ELSE@@
	aadl2glueC -allboards -o $(dir $@) $^
	@@END_IF@@
	touch $@

	@@END_IF@@
	@@END_TABLE@@

@@-- Then generate Dataviews once per target language - first for C, it is needed in any case
# Compile the ASN.1 models in C
dataview/C/built: ${DATAVIEW_UNIQ} ${DATAVIEW_ACN} ${CP_FILES}
	mkdir -p $(dir $@)
	# asn2dataModel does not take the ACN files, and only calls asn1scc
	# asn2dataModel -o $(dir $@) -toC ${DATAVIEW_UNIQ} ${DATAVIEW_ACN}
	asn1scc -typePrefix asn1Scc -equal -fp AUTO -o $(dir $@) -c -uPER -ACN $^
	cp ${TOOL_INST}/share/AutoGUI/debug_messages.? dataview/C
	cp ${TOOL_INST}/share/AutoGUI/timeInMS.? dataview/C
	cd dataview/C && msgPrinter ../dataview-uniq.asn
	cd dataview/C && msgPrinterASN1 ../dataview-uniq.asn
	touch $@

        @@TABLE@@
	   @@IF@@ @_Unique_Languages_@ = Ada or @_Unique_Languages_@ = SDL
              @@SET@@ Need_Ada=TRUE
	   @@ELSIF@@ @_Unique_Languages_@ = C or @_Unique_Languages_@ = CPP or @_Unique_Languages_@ = Blackbox_C or @_Unique_Languages_@ = Timer_Manager
           @@--  do nothing, C is always done, only once
	   @@ELSIF@@ @_Unique_Languages_@ = GUI
           @@--  for DMT, GUI means Python
# Compile the ASN.1 models in Python for the autogenerated GUIs
@@INLINE(dataview/Python/built:	dataview/C/built )( )()@@
        @@--  aadl2glueC has to be called before the python mapper is built
        @@--  because it depends on gui_api.c/etc.
        @@TABLE@@
          @@IF@@ @_Language_@ = GUI
             @_LOWER:Function_Names_@/GUI/wrappers/aadl2glueC_built
          @@END_IF@@
        @@END_TABLE@@
        sql_db/DV.py
@@END_INLINE@@
	mkdir -p $(dir $@)
	asn2dataModel -o $(dir $@) -toPython ${DATAVIEW_UNIQ}  @@-- Ignore context parameters for python interface
	$(MAKE) -C dataview/Python -f Makefile.python
        @@TABLE@@
        @@IF@@ @_Language_@ = GUI
	cp dataview/Python/* @_LOWER:Function_Names_@/GUI/wrappers/python
	cp dataview/C/timeInMS.[ch] dataview/C/debug_messages.c @_LOWER:Function_Names_@/GUI/wrappers/python
	cd @_LOWER:Function_Names_@/GUI/wrappers/python && \
	   gcc -g -fPIC -c  gui_api.c ../../src/queue_manager.c timeInMS.c debug_messages.c -I. -I../../src && \
	   gcc -g -shared -o PythonAccess.so gui_api.o queue_manager.o timeInMS.o debug_messages.o -lrt
	mkdir -p binaries/@_LOWER:Function_Names_@_GUI
	cp -f @_LOWER:Function_Names_@/GUI/wrappers/python/* binaries/@_LOWER:Function_Names_@_GUI
	cp -f @_LOWER:Function_Names_@/GUI/wrappers/*.py binaries/@_LOWER:Function_Names_@_GUI
	cp -f @_LOWER:Function_Names_@/GUI/wrappers/*.ui binaries/@_LOWER:Function_Names_@_GUI
	@@-- Compute the error codes
	echo "errCodes = \\" >> binaries/@_LOWER:Function_Names_@_GUI/datamodel.py
	taste-asn1-errCodes binaries/@_LOWER:Function_Names_@_GUI/dataview-uniq.h >> binaries/@_LOWER:Function_Names_@_GUI/datamodel.py
        @@-- If system contains the PeekPoke component, copy the relevant code in the gui folder
        @@IF@@ @_LOWER:Function_Names_@ = taste_probe_console
	@# Peek-Poke function is placed in the gui folder
	cp ${TOOL_INST}/bin/taste-gnuplot-streams binaries/@_LOWER:Function_Names_@_GUI/driveGnuPlotsStreams.pl
	cp ${TOOL_INST}/share/peekpoke/peekpoke.py binaries/@_LOWER:Function_Names_@_GUI
	cp ${TOOL_INST}/share/peekpoke/PeekPoke.glade binaries/@_LOWER:Function_Names_@_GUI
        @@END_IF@@  @@-- End of PeekPoke-specifics
        @@-- Add symbolic link to the SQL Database interface for the GUIs, if needed
	if [ -f sql_db/db.info ]; then cd binaries/@_LOWER:Function_Names_@_GUI && ln -fs ../../sql_db; fi
        @@-- Copy User-defined widgets file to the binary folder (UserWidgets.py + any other files)
	cp -f -u @_LOWER:Function_Names_@/GUI/src/* binaries/@_LOWER:Function_Names_@_GUI
        @@-- Copy InterfaceView.aadl, it is needed to replay MSC scenarios
	#  Interface view must be placed in the gui folder to allow replaying MSCs
	cp -u ../InterfaceView.aadl binaries/@_LOWER:Function_Names_@_GUI
        @@END_IF@@  @@-- End of GUI-specifics
        @@END_TABLE@@
	touch $@
	   @@ELSE@@
dataview/@_Unique_Languages_@/built: ${DATAVIEW_UNIQ} # no context parameters except for C and Ada
	mkdir -p $(dir $@) && asn2dataModel -allboards -o $(dir $@) -to@_Unique_Languages_@ $^
	@@IF@@ @_Unique_Languages_@ = SIMULINK or @_Unique_Languages_@ = QGenC or @_Unique_Languages_@ = QGenAda
	@@TABLE@@
	@@IF@@ @_Language_@ = SIMULINK or @_Language_@ = QGenC or @_Language_@ = QGenAda
	cp -u $(dir $@)/* @_LOWER:Function_Names_@/@_Language_@/src
	cp -u $(dir $@)/* cfs/apps/@_LOWER:Function_Names_@_app/fsw/src/QGen
	@@END_IF@@
	@@END_TABLE@@
	@@END_IF@@
	touch $@
	   @@END_IF@@
	@@END_TABLE@@

	@@IF@@ @_Need_Ada_@=TRUE
dataview/Ada/built: ${DATAVIEW_UNIQ} ${CP_FILES}
	mkdir -p $(dir $@)
	asn2dataModel -allboards -o $(dir $@) -toAda $^
	touch $@
	cd dataview/Ada && rm -f gnat.cfg GPS_project.gpr IgnoredExaminerWarnings.wrn runSpark.sh
	@@END_IF@@

clean:
	rm -rf binaries dataview
	$(MAKE) -C build -f Makefile.taste clean

.PHONY: clean simu compile-all-linux function-instances-linux function-types-linux build-default dataview build-rtems-ada dataview run_cv
