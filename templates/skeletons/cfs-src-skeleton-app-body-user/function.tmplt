@@SET@@ TABLES_ENABLED = False
@@SET@@ EVENTS_ENABLED = True
@@SET@@ MESSAGES_ENABLED = True
@@IF@@ @_DataStore_@ = "YES"
@@SET@@ DATASTORE_ENABLED = TRUE
@@END_IF@@
#include "@_LOWER:Name_@_app_user.h"

@@IF@@ @_Language_@ = QGenC
// Load QGen wrapper file
#include "@_LOWER:Name_@_vm_if.h"
@@END_IF@@

void @_UPPER:Name_@_User_Main(void)
{    
    // TODO Call here send/receive messages in order needed


    // status = OS_TaskDelay(period_ms);

} /* End of @_UPPER:Name_@_User_Main() */


void @_UPPER:Name_@_User_Init(void)
{
    // User initialization here

    @@IF@@ @_DATASTORE_ENABLED_@
    // Call datastore initialization with 50 bytes
    @_UPPER:Name_@_Datastore_User_Init(50);
    @@END_IF@@

}


@@IF@@ @_DATASTORE_ENABLED_@
int32 @_UPPER:Name_@_Datastore_User_Init(int datastoreSize)
{
    // Datastore size in bytes
    @_UPPER:Name_@_Data.MAX_STORE_LENGTH = datastoreSize;

    return @_UPPER:Name_@_Datastore_Init();

}

int32 @_UPPER:Name_@_Datastore_User_Store(const void *dataToStore)
{
    return @_UPPER:Name_@_Datastore_Store(dataToStore);

}


void @_UPPER:Name_@_Datastore_User_Load(uint8 load[@_UPPER:Name_@_Data.MAX_STORE_LENGTH])
{
    // Read data from CDS
    CFE_ES_RestoreFromCDS(load, @_UPPER:Name_@_Data.CDSHandlePtr);

}
@@END_IF@@

@@IF@@ @_MESSAGES_ENABLED_@
@_Send_Messages_Functions_@
@_Receive_Messages_Functions_@
@@END_IF@@

@@IF@@ @_EVENTS_ENABLED_@
@_Send_Events_@
@@END_IF@@

@@IF@@ @_Language_@ = QGenC
// QGen wrappper
@@TABLE@@
void @_UPPER:Name_@_QGen_Wrapper_@_List_Of_RIs_@(void) {
    @_LOWER:Name_@_Step(@_QGen_Wrapper_Req_@, @_QGen_Wrapper_Pro_@);
}
@@END_TABLE@@
@@END_IF@@

@_Component_Management_Functions_@
