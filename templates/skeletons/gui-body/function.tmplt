@@-- The up to date list of tags available for this template is available here:
@@-- If you have no internet access you can also use (with vim) Ctrl-W-f then Ctrl-W-L (or gf)
@@-- in vim to open the doc: $HOME/tool-inst/share/kazoo/doc/templates_skeletons_sub_function.ascii
@@--
/* Body file for GUI @_Name_@
 * Generated by TASTE/Kazoo on @_NOW_@
 * DO NOT EDIT THIS FILE MANUALLY - MODIFY THE KAZOO TEMPLATE IF NECESSARY
*/
@@IF@@ @_List_Of_ASync_PIs'Length_@ > 1 or (@_List_Of_ASync_PIs'Length_@ = 1 and (@_List_Of_ASync_RIs'Length_@ = 0 or not @_Glue_@))
   @@-- >1 means there is the Poll function, otherwise =1 if there are no Telecommands (RIs: no Poll function)
   @@-- If glue flag was not set, the Poll function is also not there so if there is one PI and no Glue, we have the field
   @@SET@@ Has_PI = TRUE
@@END_IF@@
@@IF@@ @_List_Of_ASync_RIs'Length_@ > 0
   @@SET@@ Has_RI = TRUE
@@END_IF@@
#include <unistd.h>
#include <mqueue.h>

#include "queue_manager.h"
#include "@_LOWER:Name_@.h"
#include "@_LOWER:Name_@_enums_def.h"

typedef struct _PI_Messages {
@@IF@@ @_Has_PI_@
   T_@_LOWER:Name_@_PI_list msg_id;
   union {
    @@TABLE@@
     @@IF@@ @_ASync_PI_Param_Type_@ /= ""
      asn1Scc@_REPLACE_ALL(-/_):ASync_PI_Param_Type_@ @_LOWER:List_Of_ASync_PIs_@_param;
     @@END_IF@@
    @@END_TABLE@@
   } msg_data;
@@END_IF@@
} PI_Messages;

typedef struct _RI_Messages {
@@IF@@ @_Has_RI_@
   T_@_LOWER:Name_@_RI_list msg_id;
   union {
    @@TABLE@@
     @@IF@@ @_ASync_RI_Param_Type_@ /= ""
      asn1Scc@_REPLACE_ALL(-/_):ASync_RI_Param_Type_@ @_LOWER:List_Of_ASync_RIs_@_param;
     @@END_IF@@
    @@END_TABLE@@
   } msg_data;
@@END_IF@@
} RI_Messages;

@@IF@@ @_Has_PI_@
// Queues of messages going from the binary to the user (PIs, or TMs)
static mqd_t @_LOWER:Name_@_PI_queue_id,
             @_LOWER:Name_@_PI_Python_queue_id;
@@END_IF@@

@@IF@@ @_Has_RI_@
// Queues of messages going from the user to the binary GUI (RIs, or TCs)
static mqd_t @_LOWER:Name_@_RI_queue_id;
@@END_IF@@


void @_LOWER:Name_@_startup(void)
{
   unsigned msgsize_max = 8192;
   FILE *f = fopen("/proc/sys/fs/mqueue/msgsize_max", "r");
   fscanf(f, "%d", &msgsize_max);

   if (msgsize_max < sizeof (PI_Messages) || msgsize_max < sizeof (RI_Messages)) {
      printf("[ERROR] The GUI is passing a message which parameter size "
             "exceeds your system limit (which is %d bytes per message).\n"
             "You can extend this limit by running: \n"
             "    echo NUMBER | sudo tee /proc/sys/fs/mqueue/msgsize_max\n"
             " ...  with NUMBER > %ld\n"
             "You can also make it permanent (check TASTE wiki)\n\n",
             msgsize_max,
             sizeof(PI_Messages) > sizeof(RI_Messages) ? sizeof(PI_Messages):sizeof(RI_Messages));
      exit(1);
   }

    char *gui_queue_name = NULL;
    int  len;
@@IF@@ @_Has_RI_@

    len = snprintf (gui_queue_name, 0, "%d_@_LOWER:Name_@_RI_queue", geteuid());
    gui_queue_name = (char *) malloc ((size_t) len + 1);
    if (NULL != gui_queue_name) {
       snprintf (gui_queue_name, len + 1, "%d_@_LOWER:Name_@_RI_queue", geteuid());

       create_exchange_queue(gui_queue_name, 5, sizeof(RI_Messages), &@_LOWER:Name_@_RI_queue_id);

       free (gui_queue_name);
       gui_queue_name = NULL;
    }
@@END_IF@@
@@IF@@ @_Has_PI_@

    len = snprintf (gui_queue_name, 0, "%d_@_LOWER:Name_@_PI_queue", geteuid());
    gui_queue_name = (char *) malloc ((size_t) len + 1);
    if (NULL != gui_queue_name) {
       snprintf (gui_queue_name, len + 1, "%d_@_LOWER:Name_@_PI_queue", geteuid());

       create_exchange_queue(gui_queue_name, 10, sizeof(PI_Messages), &@_LOWER:Name_@_PI_queue_id);

       free (gui_queue_name);
       gui_queue_name = NULL;
    }

    len = snprintf (gui_queue_name, 0, "%d_@_LOWER:Name_@_PI_Python_queue", geteuid());
    gui_queue_name = (char *) malloc ((size_t) len + 1);
    if (NULL != gui_queue_name) {
       snprintf (gui_queue_name, len + 1, "%d_@_LOWER:Name_@_PI_Python_queue", geteuid());

       /* Extra queue for the TM sent to the Python mappers */
       create_exchange_queue(gui_queue_name, 10, sizeof (PI_Messages), &@_LOWER:Name_@_PI_Python_queue_id);

       free (gui_queue_name);
       gui_queue_name = NULL;
    }
@@END_IF@@
}

@@IF@@ @_Has_RI_@
//  Function polling the message queue for incoming message from the user
void @_LOWER:Name_@_PI_Poll(void)
{
@@IF@@ @_List_Of_ASync_RIs'Length_@ > 0
   struct mq_attr msgq_attr;
   char* msgcontent = NULL;

   T_@_LOWER:Name_@_RI_list message_received_type;

   if ((msgcontent = (char*)malloc(sizeof(RI_Messages))) == NULL) {
      perror("Error when allocating memory in GUI polling function");
      exit (-1);
   }

   mq_getattr(@_LOWER:Name_@_RI_queue_id, &msgq_attr);

   while (!retrieve_message_from_queue(@_LOWER:Name_@_RI_queue_id,
                                       sizeof(RI_Messages),
                                       msgcontent,
                                       (int *)&message_received_type)) {
      switch(message_received_type) {
@@TABLE@@
         case i_@_List_Of_ASync_RIs_@:
           @@IF@@ @_ASync_RI_Param_Type_@ /= ""
            @_LOWER:Name_@_RI_@_List_Of_ASync_RIs_@((asn1Scc@_REPLACE_ALL(-/_):ASync_RI_Param_Type_@ *)msgcontent);
           @@ELSE@@
            @_LOWER:Name_@_RI_@_List_Of_ASync_RIs_@();
           @@END_IF@@
            break;
@@END_TABLE@@
       default : break;
      }
   }

   free(msgcontent);
@@END_IF@@
   return;
}
@@END_IF@@

@_Provided_Interfaces_@

@@TABLE@@
void @_LOWER:Name_@_PI_@_Timers_@(void)
{
 // There shoud be no timers in GUI functions
 // However the template may be modified to support them and do specific
 // action upon timer expiration (e.g. periodic check that the GUI queue
 // is still alive).
}
@@END_TABLE@@
