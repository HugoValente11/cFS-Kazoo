@@IF@@ @_Language_@ = QGenC
@@SET@@ LANG_QGEN="c"
@@END_IF@@
all: generate-code

Where are tho

clean:
	rm -rf obj ./xmi

edit:
	matlab -desktop -sd src

@@-- --------------------------------------
@@-- Code generation for QGenC and QGenAda:
@@-- --------------------------------------
@@--
@@IF@@ @_Language_@ = QGenC
@@INLINE(generate-code: )( )()@@
        @@TABLE@@
            ./xmi/@_List_Of_PIs_@_built
	@@END_TABLE@@
@@END_INLINE@@

@@TABLE@@
./xmi/@_List_Of_PIs_@_built: ./src/@_List_Of_PIs_@.slx
	$(warning ---------------------------------------------------------------------)
	$(warning NOTE: The following is a patch to generate source code automatically.)
	$(warning ---------------------------------------------------------------------)
	matlab -batch \
	    "cd src; \
	     run ./Simulink_DataView_asn.m; \
	     qgen_export_xmi ('@_List_Of_PIs_@.slx', '-o', '../xmi'); \
	     exit;"
	qgenc ./xmi/@_List_Of_PIs_@.xmi --gen-entrypoint --wrap-io --pre-process-xmi --incremental \
	    --no-misra --language @_LANG_QGEN_@ --output src
	touch $@

@@END_TABLE@@
@@-- NOTE: Use rules with grouped targets (&:) if make --version >= 4.3.
@@-- However, TASTE uses version 4.2.1, so we use a pattern rule with multiple
@@-- targets. Now, make will assume that all targets are generated by same
@@-- command invocation.
@@-- https://stackoverflow.com/questions/2973445/gnu-makefile-rule-generating-a-few-targets-from-a-single-source-file
@@INLINE( )@@
    @@TABLE@@
./src/@_List_Of_PIs_@%slx
    @@END_TABLE@@
: ./src/.@_LOWER:Name_@_script.m.md5
@@END_INLINE@@
	$(warning Edit the Simulink model(s) before the system build.)
	matlab -batch \
	    "cd src;  \
	     run @_LOWER:Name_@_script.m;  \
	     exit;"

./src/.@_LOWER:Name_@_script.m.md5: ./src/@_LOWER:Name_@_script.m
	@@-- Create md5sum file if does not exist.
	@@-- POST: md5sum file is created.
	test -f $@ || md5sum $< > $@
	@@-- If MATLAB script contents changed, update md5sum file.
	md5sum -c $@ &> /dev/null || md5sum $< > $@

@@-- ---------------------------------------
@@-- Code generation for Simulink functions:
@@-- ---------------------------------------
@@--
@@ELSIF@@ @_Language_@ = SIMULINK
generate-code:
	$(warning ---------------------------------)
	$(warning TODO: generate-code for Simulink.)
	$(warning ---------------------------------)
@@END_IF@@

compile-linux: generate-code
	mkdir -p obj && cd obj && gcc -c ../src/*.c ../code/*.c ../wrappers/*.c 

.PHONY: all clean edit generate-code compile-linux
