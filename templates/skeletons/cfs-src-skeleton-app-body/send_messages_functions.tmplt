@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Language_@            : The implementation language of the function
@@-- @_Property_Names_@      : All AADL properties (names) associated to the function
@@-- @_Property_Values_@     : ... and corresponding values
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Is_Timer_@            : Flag set to true if this is a timer interface
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)
@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)@@-- 
@@-- @_Event_Name_@, @_Event_Info_@, @_Event_Type_@, @_Event_ID_@
@@-- @_Message_Content_@, @_Message_ID_@, @_Message_Size_@, @_Store_Message_@, @_Target_Name_@
@@IF@@ @_Direction_@ = "PI" and @_Kind_@ = MESSAGE_OPERATION
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                 */
/* @_UPPER:Parent_Function_@_Send_@_Name_@ -- Send message         */
/*                                                                 */
/*                                                                 */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
int32 @_UPPER:Parent_Function_@_User_Send_@_Name_@() {
    // TODO Build structs here
    @@TABLE@@
    // @_UPPER:Parent_Function_@_APP_Data.OUT_@_Param_Names_@;
    @@END_TABLE@@

    // Define buffer where stream will be written to
    byte perBuffer[asn1Scc@_REPLACE_ALL((-)/_):Param_Types_@_REQUIRED_BYTES_FOR_ENCODING];

    // Define bitstream
    BitStream bitstream;

    // Initialize bitstream
    BitStream_Init(&bitstream, perBuffer, asn1Scc@_REPLACE_ALL((-)/_):Param_Types_@_REQUIRED_BYTES_FOR_ENCODING);

    // Initialize error code
    int errorCode;

    // Encode
    if (!asn1Scc@_REPLACE_ALL((-)/_):Param_Types_@_Encode(&@_UPPER:Parent_Function_@_APP_Data.OUT_@_Param_Names_@, &bitstream, &errorCode, TRUE))
    {
        CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Encode failed. Error code %d.\n", errorCode);
    }

    status = CFE_PSP_MemCpy(CFE_SB_GetUserData(&@_UPPER:Parent_Function_@_APP_Data.MsgPtr_@_Name_@), &perBuffer, sizeof(perBuffer));

    if (status != CFE_SUCCESS) {
        @_UPPER:Parent_Function_@_APP_Data.RunStatus = CFE_ES_RunStatus_APP_ERROR;
        CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Error writing the struct, RC = %lu\n", (unsigned long) status);
    }

    if (status == CFE_SUCCESS)
    {
        status = CFE_SB_TransmitMsg(&@_UPPER:Parent_Function_@_APP_Data.MsgPtr_@_Name_@, false);

        if (status != CFE_SUCCESS) {
            @_UPPER:Parent_Function_@_APP_Data.RunStatus = CFE_ES_RunStatus_APP_ERROR;
            CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Error sending the message, RC = %lu\n", (unsigned long) status);
        } 
    }
    return status;
}

@@ELSIF@@ @_Kind_@ = MESSAGE_OPERATION
int32 @_UPPER:Parent_Function_@_User_Receive_@_Name_@() {
    // CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Try number %i of receiving message", i);
        
    status = CFE_SB_ReceiveBuffer(&@_UPPER:Parent_Function_@_APP_Data.Buffer,
                           @_UPPER:Parent_Function_@_APP_Data.CommandPipe,
                           CFE_SB_PEND_FOREVER);

    if (status != CFE_SUCCESS)
    {
        CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Error ReceiveBuffer, RC = 0x%08lX\n",
                             (unsigned long)status);
       
    } else 
    {
        // Get buffer data
        byte *data = CFE_SB_GetUserData(&@_UPPER:Parent_Function_@_APP_Data.Buffer->Msg);

        // Declare bit stream
        BitStream bitstream;

        // Initialize bitstream
        BitStream_AttachBuffer(&bitstream, data, asn1Scc@_REPLACE_ALL((-)/_):Param_Types_@_REQUIRED_BITS_FOR_ENCODING);

        // Declare errorCode
        int errorCode;

        // Decode data
        if (!asn1Scc@_REPLACE_ALL((-)/_):Param_Types_@_Decode(&@_UPPER:Parent_Function_@_APP_Data.IN_@_Param_Names_@, &bitstream, &errorCode))
        {
            CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Decode failed. Error code: %d", errorCode);
        } else 
        {
        // Message received stored in @_UPPER:Parent_Function_@_APP_Data.IN_@_Param_Names_@
        // TODO handle on receive
        // CFE_ES_WriteToSysLog("[@_UPPER:Parent_Function_@] Message received: %s", @_UPPER:Parent_Function_@_APP_Data.IN_@_Param_Names_@);

        }
    }
    return status;
}

@@END_IF@@
