@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Language_@            : The implementation language of the function
@@-- @_Property_Names_@      : All AADL properties (names) associated to the function
@@-- @_Property_Values_@     : ... and corresponding values
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Is_Timer_@            : Flag set to true if this is a timer interface
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)
@@IF@@ @_Direction_@ = "PI" and @_Kind_@ = MESSAGE_OPERATION
void Test_@_UPPER:Parent_Function_@_Send_@_Name_@_Init(void)
{
    // Nominal
    @_UPPER:Parent_Function_@_Send_@_Name_@_Init();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_SB_Subscribe)) == 1, "CFE_SB_Subscribe called");
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 0, "CFE_ES_WriteToSysLog should not be called");


    // Test multiple failures
    UT_ResetState(0);
     CFE_Status_t failureCodes[] = {
         CFE_SB_MAX_MSGS_MET, CFE_SB_MAX_DESTS_MET, CFE_SB_BAD_ARGUMENT, CFE_SB_BUF_ALOC_ERR
         };
    int numFailures = sizeof(failureCodes) / sizeof(failureCodes[0]);
    for (int i = 0; i < numFailures; i++)
    {
        /* Reset the state before each test case */
        UT_ResetState(UT_KEY(CFE_SB_Subscribe));
        UT_ResetState(UT_KEY(CFE_ES_WriteToSysLog));
        UT_SetDeferredRetcode(UT_KEY(CFE_SB_Subscribe), 1, failureCodes[i]);
        @_UPPER:Parent_Function_@_Send_@_Name_@_Init();
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "CFE_ES_WriteToSysLog called");
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_SB_Subscribe)) == 1, "CFE_SB_Subscribe called");
    }
}

void Test_@_UPPER:Parent_Function_@_User_Send_@_Name_@(void)
{
     /*
     * Test Case For:
     * void @_UPPER:Parent_Function_@_User_Send_@_Name_@( void )
     */

    /*
     *
     * First call it in "nominal" mode where all
     * dependent calls should be successful by default.
     */
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, true);
    @_UPPER:Parent_Function_@_User_Send_@_Name_@();

    /* trigger a failure for each of the sub-calls,
     * and confirm a write to syslog for each.
     * Note that this count accumulates, because the status
     * is _not_ reset between these test cases. */

    // Fail on encoding
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, false);
    @_UPPER:Parent_Function_@_User_Send_@_Name_@();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "CFE_ES_WriteToSysLog() called");

    // Fail on memcpy
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, true);
    UT_SetDeferredRetcode(UT_KEY(CFE_PSP_MemCpy), 1, CFE_PSP_ERROR);
    @_UPPER:Parent_Function_@_User_Send_@_Name_@();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 2, "CFE_ES_WriteToSysLog() called");

    // Fail on transmit message
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, true);
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_TransmitMsg), 1, CFE_SB_BAD_ARGUMENT);
    @_UPPER:Parent_Function_@_User_Send_@_Name_@();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 3, "CFE_ES_WriteToSysLog() called");
}
@@END_IF@@
@@IF@@ @_Direction_@ = "RI" and @_Kind_@ = MESSAGE_OPERATION
void Test_@_UPPER:Parent_Function_@_Receive_@_Name_@_Init(void)
{
    // Nominal
    @_UPPER:Parent_Function_@_Receive_@_Name_@_Init();

    // Error on subscribing
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_Subscribe), 1, CFE_SB_BAD_ARGUMENT); 
    @_UPPER:Parent_Function_@_Receive_@_Name_@_Init();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "CFE_ES_WriteToSysLog called");

}

void Test_@_UPPER:Parent_Function_@_User_Receive_@_Name_@(void)
{
    // Mock buffer and message
    CFE_SB_Buffer_t mockBuffer;
    memset(&mockBuffer, 0, sizeof(CFE_SB_Buffer_t)); // Clear the buffer
    memset(mockBuffer.Msg.Byte, 42, sizeof(mockBuffer.Msg.Byte));

    @_UPPER:Parent_Function_@_APP_Data.Buffer = &mockBuffer;


    // Error on receive buffer
    UT_SetDeferredRetcode(UT_KEY(CFE_SB_ReceiveBuffer), 1, CFE_SB_BAD_ARGUMENT); 
    @_UPPER:Parent_Function_@_User_Receive_@_Name_@();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "CFE_ES_WriteToSysLog called");

    // Fail on decoding
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Decode), 1, false);
    @_UPPER:Parent_Function_@_User_Receive_@_Name_@();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 2, "CFE_ES_WriteToSysLog called");

    // Success
    byte mockData[40];
    memset(mockData, 0, sizeof(mockData)); // Initialize the mock data as needed for the test
    UT_SetDataBuffer(UT_KEY(CFE_SB_ReceiveBuffer), &mockBuffer, sizeof(mockBuffer), false);
    UT_SetDataBuffer(UT_KEY(CFE_SB_GetUserData), mockData, sizeof(mockData), false);
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Decode), 1, true);
    @_UPPER:Parent_Function_@_User_Receive_@_Name_@();
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 2, "CFE_ES_WriteToSysLog should not be called");

}
@@END_IF@@