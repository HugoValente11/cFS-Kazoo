@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Language_@            : The implementation language of the function
@@-- @_Property_Names_@      : All AADL properties (names) associated to the function
@@-- @_Property_Values_@     : ... and corresponding values
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Is_Timer_@            : Flag set to true if this is a timer interface
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)
@@IF@@ @_Direction_@ = "PI" and @_Kind_@ = MESSAGE_OPERATION
void Test_@_UPPER:Parent_Function_@_Send_@_Name_@_Init(void)
{
    // Nominal case: Ensuring message initialization sets message ID and size correctly without error
    UT_ResetState(0);
    memset(&@_UPPER:Parent_Function_@_APP_Data, 0, sizeof(@_UPPER:Parent_Function_@_APP_Data));
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_Send_@_Name_@_Init(), CFE_SUCCESS);
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 0, "No syslog should be written for successful message initialization");
    UtAssert_True(@_UPPER:Parent_Function_@_APP_Data.MsgId_@_Name_@ != 0, "Message ID should be set during initialization");
    UtAssert_True(@_UPPER:Parent_Function_@_APP_Data.Size_@_Name_@ != 0, "Message size should be defined during initialization");

    // Testing failure conditions for message initialization
    CFE_Status_t failureCodes[] = {
        CFE_SB_MAX_MSGS_MET, CFE_SB_MAX_DESTS_MET, CFE_SB_BAD_ARGUMENT, CFE_SB_BUF_ALOC_ERR
    };
    for (int i = 0; i < sizeof(failureCodes)/sizeof(failureCodes[0]); ++i) {
        UT_ResetState(0);
        UT_SetDeferredRetcode(UT_KEY(CFE_MSG_Init), 1, failureCodes[i]);
        UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_Send_@_Name_@_Init(), failureCodes[i]);
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "Syslog should be written for message initialization failure");
    }
}

void Test_@_UPPER:Parent_Function_@_User_Send_@_Name_@(void)
{
    // Test case: Successful message encoding and transmission
    @_UPPER:Parent_Function_@_APP_Data.RunStatus = CFE_ES_RunStatus_APP_RUN;
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, true);
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Send_@_Name_@(), CFE_SUCCESS);
    UtAssert_True(@_UPPER:Parent_Function_@_APP_Data.RunStatus == CFE_ES_RunStatus_APP_RUN, "Message successfully encoded and sent.");

    // Test case: Failure during the encoding process
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, false);
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Send_@_Name_@(), CFE_SB_BAD_ARGUMENT);
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "Encoding failure leads to an error log entry.");
    UtAssert_True(@_UPPER:Parent_Function_@_APP_Data.RunStatus == CFE_ES_RunStatus_APP_ERROR, "Encoding failure changes the application run status to error.");

    // Test case: Failure during memory copy (CFE_PSP_MemCpy) operation
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, true); // Encoding succeeds
    UT_SetDeferredRetcode(UT_KEY(CFE_PSP_MemCpy), 1, CFE_PSP_ERROR); // Memory copy fails
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Send_@_Name_@(), CFE_PSP_ERROR);
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 2, "Memory copy failure leads to an error log entry.");
    UtAssert_True(@_UPPER:Parent_Function_@_APP_Data.RunStatus == CFE_ES_RunStatus_APP_ERROR, "Memory copy failure changes the application run status to error.");

    // Test cases: Various failures during message transmission
    CFE_Status_t failureCodes[] = {
        CFE_SB_BAD_ARGUMENT, CFE_SB_MSG_TOO_BIG, CFE_SB_BUF_ALOC_ERR
    };
    int numFailures = sizeof(failureCodes) / sizeof(failureCodes[0]);
    for (int i = 0; i < numFailures; i++)
    {
        UT_ResetState(UT_KEY(CFE_SB_TransmitMsg));
        UT_ResetState(UT_KEY(CFE_ES_WriteToSysLog));
        UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Encode), 1, true); // Assume encoding succeeds
        UT_SetDeferredRetcode(UT_KEY(CFE_SB_TransmitMsg), 1, failureCodes[i]);
        UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Send_@_Name_@(), failureCodes[i]);
        UtAssert_True(@_UPPER:Parent_Function_@_APP_Data.RunStatus == CFE_ES_RunStatus_APP_ERROR, "Transmission failure changes the application run status to error.");
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "Transmission failure leads to an error log entry.");
    }
}
@@END_IF@@
@@IF@@ @_Direction_@ = "RI" and @_Kind_@ = MESSAGE_OPERATION
void Test_@_UPPER:Parent_Function_@_Receive_@_Name_@_Init(void)
{
    // Nominal case: Subscription success
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_Receive_@_Name_@_Init(), CFE_SUCCESS);
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_SB_Subscribe)) == 1, "CFE_SB_Subscribe should be called once for successful subscription");

    // Testing subscription failures
    CFE_Status_t failureCodes[] = {
        CFE_SB_MAX_MSGS_MET, CFE_SB_MAX_DESTS_MET, CFE_SB_BAD_ARGUMENT, CFE_SB_BUF_ALOC_ERR
    };
    for (int i = 0; i < sizeof(failureCodes)/sizeof(failureCodes[0]); ++i) {
        UT_ResetState(0);
        UT_SetDeferredRetcode(UT_KEY(CFE_SB_Subscribe), 1, failureCodes[i]);
        UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_Receive_@_Name_@_Init(), failureCodes[i]);
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "Syslog should be written for subscription failure");
    }
}

void Test_@_UPPER:Parent_Function_@_User_Receive_@_Name_@(void)
{
    // Test setup: Mock the message buffer and data to simulate receiving a message
    CFE_SB_Buffer_t mockBuffer;
    memset(&mockBuffer, 0, sizeof(CFE_SB_Buffer_t)); // Clear the buffer to simulate a fresh message
    memset(mockBuffer.Msg.Byte, 42, sizeof(mockBuffer.Msg.Byte)); // Use a mock value to simulate message data

    @_UPPER:Parent_Function_@_APP_Data.Buffer = &mockBuffer; // Set the global buffer to point to the mock buffer

    // Test case: Failures in receiving the buffer due to various reasons
    CFE_Status_t failureCodes[] = {
        CFE_SB_BAD_ARGUMENT, CFE_SB_TIME_OUT, CFE_SB_PIPE_RD_ERR, CFE_SB_NO_MESSAGE
    };
    int numFailures = sizeof(failureCodes) / sizeof(failureCodes[0]);
    for (int i = 0; i < numFailures; i++)
    {
        UT_ResetState(UT_KEY(CFE_SB_ReceiveBuffer)); // Reset state to ensure clean environment for each test
        UT_SetDeferredRetcode(UT_KEY(CFE_SB_ReceiveBuffer), 1, failureCodes[i]); // Simulate failure
        UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Receive_@_Name_@(), failureCodes[i]); // Execute test
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "Failed receiving message due to: %d", failureCodes[i]);
    }

    // Test case: Failures in decoding the received message
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Decode), 1, false); // Simulate decode failure
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Receive_@_Name_@(), CFE_SB_BAD_ARGUMENT); // Execute test
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "Decode failure logged correctly.");

    // Test case: Successful message reception and decoding
    byte mockData[40];
    memset(mockData, 0, sizeof(mockData)); // Prepare mock data for successful test
    UT_SetDataBuffer(UT_KEY(CFE_SB_ReceiveBuffer), &mockBuffer, sizeof(mockBuffer), false); // Mock buffer reception
    UT_SetDataBuffer(UT_KEY(CFE_SB_GetUserData), mockData, sizeof(mockData), false); // Mock user data reception
    UT_SetDeferredRetcode(UT_KEY(asn1SccMyInteger_Decode), 1, true); // Simulate successful decode
    UT_TEST_FUNCTION_RC(@_UPPER:Parent_Function_@_User_Receive_@_Name_@(), CFE_SUCCESS); // Execute test
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 0, "Successful reception and decoding of the message.");
}
@@END_IF@@