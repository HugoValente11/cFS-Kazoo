@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Language_@            : The implementation language of the function
@@-- @_Property_Names_@      : All AADL properties (names) associated to the function
@@-- @_Property_Values_@     : ... and corresponding values
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Is_Timer_@            : Flag set to true if this is a timer interface
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)
@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the interface
@@-- @_Direction_@           : "PI" or "RI"
@@-- @_Kind_@                : The RCM Kind
@@-- @_Parent_Function_@     : The name of the function
@@-- @_Param_Names_@         : List of parameter names
@@-- @_Param_Types_@         :   |_ Corresponding parameter types
@@-- @_Param_Directions_@    :   |_ Corresponding direction
@@-- @_Param_Encodings_@     :   |_ Corresponding ASN.1 encoding
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : Properties of the interface
@@-- @_IF_Property_Names_@, _Values_@ : User-defined properties (vector tag)@@-- 
@@-- @_Event_Name_@, @_Event_Info_@, @_Event_Type_@, @_Event_ID_@
@@IF@@ @_Direction_@ = "PI" and @_EXIST:Event_Name_@  and @_Kind_@ = EVENT_OPERATION
void Test_@_UPPER:Parent_Function_@_User_@_REPLACE_ALL( /_):Event_Name_@_Event(void)
{
    // Success
    UT_CheckEvent_t EventTest;
    UT_CheckEvent_Setup(&EventTest, 
    @_UPPER:Parent_Function_@_@_UPPER:REPLACE_ALL( /_):Event_Name_@_EID, "[@_UPPER:Parent_Function_@-@_Event_Type_@] @_Event_Info_@");
    @_UPPER:Parent_Function_@_User_@_REPLACE_ALL( /_):Event_Name_@_Event();
    UtAssert_True(EventTest.MatchCount == 1, "@_UPPER:REPLACE_ALL( /_):Event_Name_@ event generated (%u)",
                  (unsigned int)EventTest.MatchCount);
    UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 0, "CFE_ES_WriteToSysLog should not be called");

    // Test multiple failures
     CFE_Status_t failureCodes[] = {
         CFE_EVS_APP_NOT_REGISTERED, CFE_EVS_APP_ILLEGAL_APP_ID, CFE_EVS_INVALID_PARAMETER
    };
    int numFailures = sizeof(failureCodes) / sizeof(failureCodes[0]);
    for (int i = 0; i < numFailures; i++)
    {
        /* Reset the state before each test case */
        UT_ResetState(UT_KEY(CFE_EVS_SendEvent));
        UT_ResetState(UT_KEY(CFE_ES_WriteToSysLog));
        UT_SetDeferredRetcode(UT_KEY(CFE_EVS_SendEvent), 1, failureCodes[i]);
        @_UPPER:Parent_Function_@_User_@_REPLACE_ALL( /_):Event_Name_@_Event();
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_ES_WriteToSysLog)) == 1, "CFE_ES_WriteToSysLog should not be called");
        UtAssert_True(UT_GetStubCount(UT_KEY(CFE_EVS_SendEvent)) == 1, "CFE_EVS_SendEvent should not be called");
    }
}
@@END_IF@@