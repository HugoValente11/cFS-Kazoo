@@-- The following tags are available in this template:
@@--
@@-- @_Name_@                : The name of the function
@@-- @_Language_@            : The implementation language
@@-- @_Zip_File_@            : Optional zip file containing the source code
@@-- @_List_Of_PIs_@         : List of all Provided Interfaces (just names)
@@-- @_List_Of_RIs_@         : List of all Required Interfaces (just names)
@@-- @_List_Of_Sync_PIs@     : List of synchronous Provided Interfaces
@@-- @_List_Of_Sync_RIs@     : List of synchronous Required Interfaces
@@-- @_List_Of_ASync_PIs@    : List of asynchronous Provided Interfaces
@@-- @_List_Of_ASync_RIs@    : List of asynchronous Required Interfaces
@@-- @_ASN1_Modules_@        : List of ASN.1 Modules names
@@-- @_ASN1_Files_@          : List of ASN.1 Files with path
@@-- @_Timers_@              : List of timers (just names)
@@-- @_Has_Context_@         : Flag, True if there are context parameters
@@-- @_CP_Names_@            : List of Context Parameter names
@@-- @_CP_Types_@            : List of Context Parameter types
@@-- @_Provided_Interfaces_@ : From template: Provided interfaces with params
@@-- @_Required_Interfaces_@ : From template: Required interfaces with params
@@-- @_Property_Names_@      : List of User-defined properties (names)
@@-- @_Property_Values_@     : List of User-defined properties (values)
@@-- @_Is_Type_@             : Flag, True if function is a component type
@@-- @_Instance_Of_@         : Optional name of component type
##################################################################
#
# Coverage Unit Test build recipe
#
# This CMake file contains the recipe for building the @_Name_@ unit tests.
# It is invoked from the parent directory when unit tests are enabled.
#
##################################################################

#
#
# NOTE on the subdirectory structures here:
#
# - "inc" provides local header files shared between the coveragetest,
#    wrappers, and overrides source code units
# - "coveragetest" contains source code for the actual unit test cases
#    The primary objective is to get line/path coverage on the FSW 
#    code units.
#
 # Unit test CMake file for function @_Name_@
 # Generated by TASTE on @_NOW_@
 # You can edit this file, it will not be overwritten

# Use the UT assert public API, and allow direct
# inclusion of source files that are normally private
include_directories(${PROJECT_SOURCE_DIR}/fsw/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/inc)


# Add a coverage test executable called "@_LOWER:Name_@_app-ALL" that 
# covers all of the functions in @_LOWER:Name_@_app.  
#
# Also note in a more complex app/lib the coverage test can also
# be broken down into smaller units (in which case one should use
# a unique suffix other than "ALL" for each unit).  For example,
# OSAL implements a separate coverage test per source unit.
add_cfe_coverage_test(@_LOWER:Name_@_app ALL 
    "coveragetest/coveragetest_@_LOWER:Name_@_app.c"
    ../fsw/src/@_LOWER:Name_@_app.c
)

# The @_LOWER:Name_@_app uses library functions provided by dataview_lib so must be linked
# with the dataview_lib stub library 
add_cfe_coverage_dependency(@_LOWER:Name_@_app ALL sample_lib)