@@-- The following tags are available in this template:
@@--
@@-- @_Thread_Name_@       : Thread name
@@-- @_Entry_Port_Name_@   : Name of the PI
@@-- @_RCM_@               : One of "CYCLIC_OPERATION", "SPORADIC_OPERATION"
@@-- @_Need_Mutex_@        : True if the PI is shared with others in the protected block
@@-- @_Pro_Block_Name_@    : Name of the protected function
@@-- @_Node_Name_@         : Name of the deployment node
@@-- @_Remote_Threads_@    : Vector tag: output remote thread list
@@-- @_RI_Port_Name_@      :    |_ Corresponding local RI name
@@-- @_Remote_PIs_@        :    |_ Associated PI Name
@@-- @_Remote_PI_Sorts_@   :    |_ Optional param type of the remote thread
@@-- @_Remote_PI_Modules_@ :    |_ Asn1 module of the optional param type
@@-- Tags related to the PI that is at the origin of the thread creation:
@@-- @_Name_@, @_Kind_@, @_Parent_Function_@   : shoud be useless here
@@-- @_Param_Names_@, _Types_@, _ASN1_Modules, _Encodings_@, _Directions_@ : param vector tag
@@-- @_Period_@, @_WCET_@, @_Queue_Size_@ : relevant here
@@-- @_IF_Property_Names_@, _Values_@ : user properties (vector tag)
@@--
@@-- Matrix of output ports: Remote thread/corresponding remote PI @_Name_@
#include "thread_@_LOWER:Thread_Name_@.h"

#include <Timer.h>
#include <Queue.h>
#include <Request.h>
#include <StartBarrier.h>

#include "transport.h"
#include "@_LOWER:Partition_Name_@_interface.h"

@@IF@@ @_RCM_@ = "CYCLIC_OPERATION"

void @_LOWER:Thread_Name_@_job()
{
    // synchronize with other threads
    taste::StartBarrier::wait();

    using namespace std::chrono_literals;
    taste::Timer::run(@_Dispatch_Offset_ms_@ms, @_TRIM:Period_@ms, [] () -> void
    {
        static taste::Request<@_UPPER:Thread_Name_@_REQUEST_SIZE> request;
        call_@_LOWER:Thread_Name_@((const char*)request.data(), request.length());
    });
}

@@ELSE@@

void @_LOWER:Thread_Name_@_job()
{
    // synchronize with other threads
    taste::StartBarrier::wait();

    using namespace std::chrono_literals;
    extern taste::Queue<@_UPPER:Thread_Name_@_REQUEST_SIZE> @_Thread_Name_@_Global_Queue;

    while(true)
    {
        static taste::Request<@_UPPER:Thread_Name_@_REQUEST_SIZE> request;
        @_Thread_Name_@_Global_Queue.get(request);

@@IF@@ @_TRIM:Period_@ /= 0
        // minimal inter-arrival time
        auto wakeupTime = std::chrono::steady_clock::now() + @_TRIM:Period_@ms;
@@END_IF@@
        call_@_LOWER:Thread_Name_@((const char*)request.data(), request.length());
@@IF@@ @_TRIM:Period_@ /= 0
        std::this_thread::sleep_until(wakeupTime);
@@END_IF@@
    }
}

@@END_IF@@
