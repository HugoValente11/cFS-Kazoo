@@-- The up to date list of tags available for this template is available here:
@@-- https://taste.tuxfamily.org/wiki/index.php?title=Kazoo_Templates_Documentation#templates.2Fconcurrency_view.2Fsub.2Fsystem.tmplt
@@-- If you are using vim, go over the URL and pres gx in to follow the link
@@-- If you have no internet access you can also use (with vim) Ctrl-W-f then Ctrl-W-L (or gf) in vim to open the text doc:
@@-- $HOME/tool-inst/share/kazoo/doc/templates_concurrency_view_sub_system.ascii
Simulation-DataView DEFINITIONS ::=
BEGIN
   IMPORTS
      @_Threads'Indent_@
      -- Import generic integer type (used for timers)
      T-UInt32 FROM TASTE-BasicTypes
      --  Import the SDL function states needed for the global system state
      @@INLINE(      )(\n      )()@@
         @@TABLE'ALIGN_ON(" ")@@
            @@IF@@ @_Block_Languages_@ = SDL
             @@IF@@ @_Block_Instance_Of_@ /= ""
               @_CAPITALIZE:REPLACE_ALL(_/-):Block_Instance_Of_@-Context FROM @_CAPITALIZE:REPLACE_ALL(_/-):Block_Instance_Of_@-Datamodel
             @@ELSE@@
               @_CAPITALIZE:REPLACE_ALL(_/-):Block_Names_@-Context FROM @_CAPITALIZE:REPLACE_ALL(_/-):Block_Names_@-Datamodel
             @@END_IF@@
            @@END_IF@@
         @@END_TABLE@@
      @@END_INLINE@@
   ;

   @_Nodes'Indent_@

   --  List all the TASTE functions present in the system
   PID ::= ENUMERATED {
        env, @_LOWER:REPLACE_ALL(_/-):Block_Names_@
   }

   --  Current observer state flag (used by model checkers)
   Observer-State-Kind ::= ENUMERATED {
      regular-state,
      error-state,
      ignore-state,
      success-state
   }

   --  Event related to the execution of a PI or call of a RI in the functional code
   Function-Event ::= CHOICE {
      @@INLINE(      )(,\n      )()@@
          @@TABLE'ALIGN_ON(" ")@@
             @_LOWER:REPLACE_ALL(_/-):Block_Names_@ @_REPLACE_ALL(_/-):CAPITALIZE:Block_Names_@-Event
          @@END_TABLE@@
      @@END_INLINE@@
   }

   --  Event at interface level (PI or RI), including source and destination ID
   Interface-Event ::= SEQUENCE {
      source PID,
      dest   PID,
      event  Function-Event
   }

   --  Event sent to the observers
   Observable-Event ::= CHOICE {
      no-event        SEQUENCE {},
      system-startup  SEQUENCE {},
      input-event     Interface-Event,   --  input event is evaluated after the transition
      output-event    Interface-Event,   --  output event is evaluated before the message is sent
      unhandled-input Interface-Event    --  message received in a state where it is not expected
   }

   --  constant that can be used to refer to the absence of an input/output event
   nothing Observable-Event ::= no-event : {}

   --  Define a queue of events, corresponding to the input queue for each function
   max-events INTEGER ::= 10
   Events-Ty ::= SEQUENCE (SIZE (0 .. max-events)) OF Observable-Event

   --  Global system state (excluding observers, which are defined later)
   System-State ::= SEQUENCE {
      --  Message queues 
      @@INLINE(      )(,\n      )(,\n)@@
         @@TABLE'ALIGN_ON(" ")@@
            @@IF@@ @_Block_Languages_@ = SDL
               @_LOWER:REPLACE_ALL(_/-):Block_Names_@-queue Events-Ty (SIZE (0..2))
            @@END_IF@@
         @@END_TABLE@@
      @@END_INLINE@@
      @@INLINE(      )(,\n      )()@@
         @@TABLE'ALIGN_ON(" ")@@
            @@IF@@ @_Block_Languages_@ = SDL
             @@IF@@ @_Block_Instance_Of_@ /= ""
               @_LOWER:REPLACE_ALL(_/-):Block_Names_@  @_CAPITALIZE:REPLACE_ALL(_/-):Block_Instance_Of_@-Context
             @@ELSE@@
               @_LOWER:REPLACE_ALL(_/-):Block_Names_@  @_CAPITALIZE:REPLACE_ALL(_/-):Block_Names_@-Context
             @@END_IF@@
            @@END_IF@@
         @@END_TABLE@@
      @@END_INLINE@@
   }
END
