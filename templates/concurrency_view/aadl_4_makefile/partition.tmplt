@@-- The up to date list of tags available for this template is available here:
@@-- https://taste.tuxfamily.org/wiki/index.php?title=Kazoo_Templates_Documentation#templates.2Fconcurrency_view.2Fsub.2Fpartition.tmplt
@@-- If you are using vim, go over the URL and pres gx in to follow the link
@@-- If you have no internet access you can also use (with vim) Ctrl-W-f or gf in vim to open the text doc:
@@-- $HOME/tool-inst/share/kazoo/doc/templates_concurrency_view_sub_partition.ascii
@@TABLE@@
  @@IF@@ @_Block_Languages_@ = SDL
     @@SET@@ Has_SDL = TRUE
  @@END_IF@@
@@END_TABLE@@
#  Build of partition @_Name_@ (common to all targets)
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)

@@IF@@ @_CPU_Platform_@ = PLATFORM_NATIVE or @_CPU_Platform_@ = PLATFORM_GENERIC_LINUX or @_CPU_Platform_@ = PLATFORM_MSP430_FREERTOS
@_LOWER:Name_@_glue:	@_REPLACE_ALL(,/ ):LOWER:Block_Names_@
@@ELSIF@@ @_CPU_Platform_@ = PLATFORM_LEON_RTEMS_POSIX or @_CPU_Platform_@ = PLATFORM_AIR
@_LOWER:Name_@_glue:	@_LOWER:Name_@_with_adainit
@@ELSIF@@ @_CPU_Platform_@ = PLATFORM_RPI
@_LOWER:Name_@_glue:	@_LOWER:Name_@_with_adainit
@@END_IF@@
@@IF@@ @_Has_SDL_@
  @@-- Opengeode generates intermediate ASN.1 files, they must be compiled
  @@-- (at partition level, not shared by all nodes)
  @@-- The code below is needed because if there is more than one instance of
  @@-- a component type, opengeode will generate the _datamodel.asn file in
  @@-- the folder of the instance, i.e. there may be more than one reference
  @@-- to the same file generated at different places The python code checks
  @@-- that when this happens only one _datamodel.asn file is kept to avoid
  @@-- an error that would otherwise be raised by asn1scc
  @@INLINE(	args=$$\(python3 -c "import os, sys; print\(' '.join\({os.path.basename\(f\):f for f in sys.argv[1:]}.values\(\)\)\)" )( )(\); \\\n	mkdir -p ..\/dataview\/Ada; asn1scc -Ada -equal --target allboards -typePrefix asn1Scc -o ..\/dataview\/Ada $$args )@@
    @@TABLE@@
       @@IF@@ @_Block_Languages_@ = SDL
          @@--  Use wildcard because in the case of the SDL to C backend the _datamodel files are not generated (yet)
          @@IF@@ @_Block_Instance_Of_@ = ""
             ${wildcard ../@_LOWER:Block_Names_@/SDL/code/@_LOWER:Block_Names_@_datamodel.asn}
          @@ELSE@@
             @@IF@@ @_Block_Is_Shared_Type_@
             @@-- instance of a shared type stored in a shared folder
             ${wildcard ../@_LOWER:Block_Names_@/SDL/code/@_LOWER:Block_Instance_Of_@_datamodel.asn}
             @@-- context parameters of the function type must be added too
             ${wildcard @_Shared_Lib_Dir_@/@_LOWER:Block_Instance_Of_@/@_LOWER:Block_Instance_Of_@/SDL/Context*.asn}
             @@ELSE@@
             ${wildcard ../@_LOWER:Block_Names_@/SDL/code/@_LOWER:Block_Instance_Of_@_datamodel.asn}
             @@-- context parameters of the function type must be added too
             ${wildcard ../@_LOWER:Block_Instance_Of_@/SDL/Context*.asn}
             @@END_IF@@
          @@END_IF@@
             @@-- If the function has context parameters, add the file
             ${wildcard ../@_LOWER:Block_Names_@/SDL/Context-@_LOWER:REPLACE_ALL(_/-):Block_Names_@.asn}
       @@END_IF@@
    @@END_TABLE@@
    ../dataview/dataview-uniq.asn
  @@END_INLINE@@
@@END_IF@@
	touch $@

@@-- For simulation target, add simulation.asn and uPER encoders
@_LOWER:Name_@_simu:	@_REPLACE_ALL(,/ ):LOWER:Block_Names_@
@@IF@@ @_Has_SDL_@
  @@INLINE(	args=$$\(python3 -c "import os, sys; print\(' '.join\({os.path.basename\(f\):f for f in sys.argv[1:]}.values\(\)\)\)" )( )(\); \\\n	mkdir -p ..\/dataview\/Ada; asn1scc -Ada -uPER -equal --target allboards -typePrefix asn1Scc -o ..\/dataview\/Ada $$args ; taste-asn1-gser -o ..\/dataview\/Ada\/src --raw $$args)@@
    @@TABLE@@
       @@IF@@ @_Block_Languages_@ = SDL
          @@--  Use wildcard because in the case of the SDL to C backend the _datamodel files are not generated (yet)
          @@IF@@ @_Block_Instance_Of_@ = ""
             ${wildcard ../@_LOWER:Block_Names_@/SDL/code/@_LOWER:Block_Names_@_datamodel.asn}
          @@ELSE@@
             ${wildcard ../@_LOWER:Block_Names_@/SDL/code/@_LOWER:Block_Instance_Of_@_datamodel.asn}
          @@END_IF@@
             @@-- If the function has context parameters, add the file
             ${wildcard ../@_LOWER:Block_Names_@/SDL/Context-@_LOWER:REPLACE_ALL(_/-):Block_Names_@.asn}
       @@END_IF@@
    @@END_TABLE@@
    ../dataview/dataview-uniq.asn
    simulation.asn
  @@END_INLINE@@
@@END_IF@@
	touch $@

@@IF@@ @_CPU_Platform_@ = PLATFORM_LEON_RTEMS_POSIX or @_CPU_Platform_@ = PLATFORM_AIR or @_CPU_Platform_@ = PLATFORM_RPI
# Build of partition @_Name_@ with the additional generation of adainit symbol
# to initialize Ada modules while the entry point of the node is in C (POHIC)
# This is only needed on some platforms ; gnat on Linux generates it automatically
# (rule generated by templates/concurrency_view/aadl_4_makefile/partition.tmplt)
@_LOWER:Name_@_with_adainit:	@_REPLACE_ALL(,/ ):LOWER:Block_Names_@
	mkdir -p @_LOWER:Name_@_adainit && \
@@INLINE(    echo ')()()@@
   @@TABLE@@
      @@IF@@ @_Block_Languages_@ = SDL or @_Block_Languages_@ = Ada
         with @_CAPITALIZE:Block_Names_@;
      @@END_IF@@
   @@END_TABLE@@
   package adainit is end adainit;' >@_LOWER:Name_@_adainit/tasteada.ads && \
@@END_INLINE@@
        cd @_LOWER:Name_@_adainit && \
@@INLINE(    )(:)( \\)@@
   ADA_INCLUDE_PATH=../../dataview/Ada/src:../../dataview/Ada/asn1rtl:../../dataview/Ada/boards/x86
   @@TABLE'TERSE@@
      @@IF@@ @_Block_Languages_@ = SDL
         ../../@_LOWER:Block_Names_@/SDL/code:../../@_LOWER:Block_Names_@/SDL/wrappers 
      @@ELSIF@@ @_Block_Languages_@ = Ada
         ../../@_LOWER:Block_Names_@/Ada/src
      @@END_IF@@
   @@END_TABLE@@
@@END_INLINE@@
$(CROSS_GNATMAKE) -c tasteada.ads && $(CROSS_GNATBIND) -t -n tasteada.ali -o ada-start.adb && mkdir -p ../@_LOWER:Node_Name_@/ada_code_startup && mv ada-start.* ../@_LOWER:Node_Name_@/ada_code_startup
@@END_IF@@
	touch $@

@@IF@@ @_CPU_Platform_@ = PLATFORM_NATIVE or @_CPU_Platform_@  = PLATFORM_GENERIC_LINUX
# Rule to execute the generated binary for this partition (used by space creator Run button)
 @@TABLE@@
  @@-- If there is at least a GUI we must run several binaries in parallel
  @@IF@@ @_Block_Languages_@ = GUI
    @@SET@@ Has_GUI = TRUE
  @@END_IF@@
 @@END_TABLE@@
 @@IF@@ @_Has_GUI_@
  @@INLINE()( )(\n\n)@@
run_@_Name_@_partition:	
   @@TABLE@@
    @@IF@@ @_Block_Languages_@ = GUI
      run_@_Block_Names_@_gui
    @@END_IF@@
   @@END_TABLE@@
   run_@_Name_@_binary
  @@END_INLINE@@
run_@_Name_@_binary:
@@IF@@ @_Debug_Flag_@
	# make sure the generated artefacts appear in space creator
	touch ../../*.pro
	cd ../binaries && taste-run-and-trace ./@_Name_@ || :
      @@IF@@ @_Coverage_@
	cd ../binaries && lcov --capture --directory .. --output-file coverage.info && genhtml coverage.info --output-directory coverage
      @@END_IF@@
@@ELSE@@
	cd ../binaries && ./@_Name_@ || :
@@END_IF@@

 @@TABLE@@
  @@IF@@ @_Block_Languages_@ = GUI
run_@_Block_Names_@_gui:
	@@-- if host is running in WSL2, it is not possible to have a persistent
	@@-- sysctl change for message queue sizes. It must be done each time:
	uname -a | grep WSL && sudo sysctl fs.mqueue.msg_max=100
	cd ../binaries && ./@_Block_Names_@
	# When GUI exits, kill the binary (-INT to allow coverage collection)
	pkill -INT @_Name_@
  @@END_IF@@
 @@END_TABLE@@
 @@ELSE@@
 @@-- no GUI. This means the binary will be killed by the user (Ctrl-C), and it
 @@-- will cause the Makefile to exit abruptly. We have to catch the trap
 @@-- before in case coverage collection is enabled to process gcov data.
run_@_Name_@_partition:
  @@IF@@ @_Debug_Flag_@
	# make sure the generated artefacts appear in space creator
	touch ../../*.pro
	# Coverage = @_Coverage_@
      @@IF@@ @_Coverage_@
	bash -c "trap 'cd ../binaries && lcov --capture --directory .. --output-file coverage.info && genhtml coverage.info --output-directory coverage' EXIT; cd ../binaries && taste-run-and-trace ./@_Name_@ || :"
      @@ELSE@@
	cd ../binaries && taste-run-and-trace ./@_Name_@ || :
      @@END_IF@@
  @@ELSE@@
	cd ../binaries && ./@_Name_@ || :
  @@END_IF@@
 @@END_IF@@
@@ELSIF@@ @_CPU_Platform_@ = PLATFORM_LEON_RTEMS_POSIX
# Execute using the Leon3 simulator
run_@_Name_@_partition:
	cd ../binaries && taste-simulate-leon3 ./@_LOWER:Name_@_leon3_rtems.exe
@@ELSE@@
run_@_Name_@_partition:
	echo "Execution platform @_CPU_Platform_@ is not compatible with the host OS"
@@END_IF@@

@_Blocks_@
